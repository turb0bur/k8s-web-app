name: CD

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
      deployment_action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - delete
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'web-app'
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: setup_env
        run: |
          echo "Exporting required environment variables..."
          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "CLUSTER_ZONE=${{ vars.GKE_CLUSTER_ZONE }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ vars.GKE_CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "K8S_NAMESPACE=${{ vars.K8S_NAMESPACE }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ vars.HELM_RELEASE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          echo "VERSION_BUMP_TYPE=${{ github.event.inputs.bump_type }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.APP_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Validate Inputs
        run: |
          echo "Validating image tag..."
          if [[ "$IMAGE_TAG" != "latest" ]] && \
             ! [[ "$IMAGE_TAG" =~ ^[a-f0-9]{7,}$ ]]; then
            echo "Invalid image tag: $IMAGE_TAG."
            echo "It must be 'latest' or a valid Git commit SHA (7+ characters)."
            exit 1
          fi
          echo "Image tag validation passed."

      - name: Helm Lint
        run: |
          echo "Linting Helm chart..."
          helm lint ./helm

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          echo "Installing gke-gcloud-auth-plugin..."
          gcloud components install gke-gcloud-auth-plugin

      - name: Create GKE Cluster if not Exists
        run: |
          echo "Checking if GKE cluster exists..."
          if ! gcloud container clusters describe $CLUSTER_NAME --zone $CLUSTER_ZONE --project $GCP_PROJECT_ID; then
            echo "Cluster does not exist. Creating GKE cluster..."
            gcloud container clusters create $CLUSTER_NAME --zone $CLUSTER_ZONE --project $GCP_PROJECT_ID
          else
            echo "Cluster already exists."
          fi

      - name: Authenticate to GKE
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME \
            --zone $CLUSTER_ZONE \
            --project $GCP_PROJECT_ID

      - name: Create Kubernetes Namespace
        run: |
          echo "Creating Kubernetes namespace if it does not exist..."
          kubectl get namespace $K8S_NAMESPACE || kubectl create namespace $K8S_NAMESPACE

      - name: Helm Dry-Run
        if: ${{ github.event.inputs.deployment_action == 'deploy' }}
        run: |
          echo "Performing Helm dry-run..."
          helm upgrade --install $RELEASE_NAME ./helm \
            --namespace $K8S_NAMESPACE \
            --set db.secret.data.POSTGRES_DB=$DB_NAME \
            --set db.secret.data.POSTGRES_USER=$DB_USER \
            --set db.secret.data.POSTGRES_PASSWORD=$DB_PASSWORD \
            --set app.secret.data.SECRET_KEY=$SECRET_KEY \
            --set app.deployment.image.tag=$IMAGE_TAG \
            --dry-run

      - name: Deploy with Helm
        if: ${{ github.event.inputs.deployment_action == 'deploy' }}
        run: |
          echo "Deploying Helm release..."
          helm upgrade --install $RELEASE_NAME ./helm \
            --namespace $K8S_NAMESPACE \
            --set db.secret.data.POSTGRES_DB=$DB_NAME \
            --set db.secret.data.POSTGRES_USER=$DB_USER \
            --set db.secret.data.POSTGRES_PASSWORD=$DB_PASSWORD \
            --set app.secret.data.SECRET_KEY=$SECRET_KEY \
            --set app.deployment.image.tag=$IMAGE_TAG

      - name: Wait for Deployments to Stabilize
        if: ${{ github.event.inputs.deployment_action == 'deploy' }}
        run: |
          echo "Waiting for Kubernetes deployments to stabilize..."
          deployments=$(kubectl get deployment -n $K8S_NAMESPACE -l "release=$RELEASE_NAME" -o jsonpath='{.items[*].metadata.name}')
          for deployment in $deployments; do
            kubectl rollout status deployment/$deployment -n $K8S_NAMESPACE
          done

      - name: Delete Helm Release
        if: ${{ github.event.inputs.deployment_action == 'delete' }}
        run: |
          echo "Deleting Helm release..."
          helm delete $RELEASE_NAME -n $K8S_NAMESPACE

      - name: Check Helm Release
        if: ${{ github.event.inputs.deployment_action == 'deploy' }}
        run: |
          if helm status $RELEASE_NAME -n $K8S_NAMESPACE &>/dev/null; then
            echo "Helm release exists."
          else
            echo "Helm release does not exist, skipping rollback."
            exit 0  # Explicitly exit with 0 to avoid marking the step as failed
          fi

      - name: Rollback on Failure
        if: failure() && ${{ github.event.inputs.deployment_action == 'deploy' }}
        run: |
          echo "Rolling back Helm release..."
          if helm history $RELEASE_NAME -n $K8S_NAMESPACE --max 1 | grep -q $RELEASE_NAME; then
            previous_revision=$(helm history $RELEASE_NAME -n $K8S_NAMESPACE --max 2 | awk 'NR==3 {print $1}')
            if [[ -n "$previous_revision" ]]; then
              helm rollback $RELEASE_NAME -n $K8S_NAMESPACE "$previous_revision"
              exit 1
            else
              echo "No previous revision found, rollback skipped."
              exit 0
            fi
          else
            echo "Release not found, rollback skipped."
            exit 0
          fi

  bump_versions:
    needs: deploy
    if: ${{ github.event.inputs.deployment_action == 'deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install bump2version
        run: |
          echo "Installing bump2version..."
          pip install bump2version

      - name: Update Chart.yaml with app version
        run: |
          echo "Updating Chart.yaml with app version..."
          helm show chart ./helm > ./helm/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: "$IMAGE_TAG/" ./helm/Chart.yaml

      - name: Set Git Author
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Bump Helm Chart Version
        run: |
          echo "Bumping Helm chart version as $VERSION_BUMP_TYPE..."
          bump2version $VERSION_BUMP_TYPE --allow-dirty

  push_changes:
    needs: bump_versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Push Changes to GitHub
        run: |
          echo "Pushing updated Chart.yaml to GitHub..."
          git push origin HEAD:main
