name: CD Blue

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'web-app'
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
      live_replicas:
        description: 'Amount of replicas for Live deployment'
        required: true
        default: 1
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  deploy_blue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: setup_env
        run: |
          echo "Exporting required environment variables..."
          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "CLUSTER_ZONE=${{ vars.GKE_CLUSTER_ZONE }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ vars.GKE_CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "K8S_NAMESPACE=${{ vars.K8S_NAMESPACE }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ vars.HELM_RELEASE_NAME }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_NAME=${{ vars.K8S_DEPLOY_BASENAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          echo "LIVE_REPLICAS=${{ github.event.inputs.live_replicas }}" >> $GITHUB_ENV
          echo "VERSION_BUMP_TYPE=${{ github.event.inputs.bump_type }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.APP_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Validate Inputs
        run: |
          echo "Validating image tag..."
          if [[ "$IMAGE_TAG" != "latest" ]] && \
             ! [[ "$IMAGE_TAG" =~ ^[a-f0-9]{7,}$ ]]; then
            echo "Invalid image tag: $IMAGE_TAG."
            echo "It must be 'latest' or a valid Git commit SHA (7+ characters)."
            exit 1
          fi
          echo "Image tag validation passed."

      - name: Helm Lint
        run: |
          echo "Linting Helm chart..."
          helm lint ./helm

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          echo "Installing gke-gcloud-auth-plugin..."
          gcloud components install gke-gcloud-auth-plugin

      - name: Authenticate to GKE
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME \
            --zone $CLUSTER_ZONE \
            --project $GCP_PROJECT_ID

      - name: Get current color mapping and swap colors
        id: swap_colors
        run: |
          echo "Checking if Helm release exists..."
          if helm status $RELEASE_NAME -n $K8S_NAMESPACE &>/dev/null; then
            echo "Helm release exists. Retrieving current Helm values..."
            current_values=$(helm get values $RELEASE_NAME -n $K8S_NAMESPACE --all)
            liveColor=$(echo "$current_values" | yq e '.liveColor' -)
            testColor=$(echo "$current_values" | yq e '.testColor' -)
            if [ "$liveColor" != "$testColor" ]; then
              newLiveColor=$testColor
              newTestColor=$liveColor
              echo "Setting colors as environment variables..."
              echo "LIVE_COLOR=$liveColor" >> $GITHUB_ENV
              echo "TEST_COLOR=$testColor" >> $GITHUB_ENV
              echo "NEW_LIVE_COLOR=$newLiveColor" >> $GITHUB_ENV
              echo "NEW_TEST_COLOR=$newTestColor" >> $GITHUB_ENV
            else
              echo "liveColor and testColor are equal. Skipping setting environment variables."
            fi
          else
            echo "Helm release does not exist. Skipping color retrieval."
          fi      

      - name: Ensure Test Deployment Exists and Ready
        run: |
          echo "Ensuring Test deployment exists and is ready..."
          if kubectl get deployment/$DEPLOYMENT_NAME-$TEST_COLOR -n $K8S_NAMESPACE; then
            test_image_tag=$(kubectl get deployment/$DEPLOYMENT_NAME-$TEST_COLOR -n $K8S_NAMESPACE -o jsonpath="{.spec.template.spec.containers[0].image}" | cut -d':' -f2)
            if [[ "$test_image_tag" != "$IMAGE_TAG" ]]; then
              echo "Test deployment image tag ($test_image_tag) does not match the provided image tag ($IMAGE_TAG). Exiting..."
              exit 1
            fi
            kubectl rollout status deployment/$DEPLOYMENT_NAME-$TEST_COLOR -n $K8S_NAMESPACE
          else
            echo "Test deployment does not exist. Exiting..."
            exit 1
          fi

      - name: Helm Dry-Run for Live Deployment
        run: |
          echo "Performing Helm dry-run for Live deployment..."
          helm upgrade --install $RELEASE_NAME ./helm \
            --namespace $K8S_NAMESPACE \
            --reuse-values \
            --set liveColor=$NEW_LIVE_COLOR \
            --set testColor=$NEW_TEST_COLOR \
            --set app.${NEW_LIVE_COLOR}Deployment.replicas=$LIVE_REPLICAS \
            --set app.${NEW_TEST_COLOR}Deployment.replicas=0 \
            --dry-run

      - name: Switch Live to Test Deployment with Helm
        run: |
          echo "Switching Live deployment with Helm..."
          helm upgrade --install $RELEASE_NAME ./helm \
            --namespace $K8S_NAMESPACE \
            --reuse-values \
            --set liveColor=$NEW_LIVE_COLOR \
            --set testColor=$NEW_TEST_COLOR \
            --set app.${NEW_LIVE_COLOR}Deployment.replicas=$LIVE_REPLICAS \
            --set app.${NEW_TEST_COLOR}Deployment.replicas=0 \

      - name: Wait for Live Deployment to Stabilize
        run: |
          echo "Waiting for Live deployment to stabilize..."
          kubectl rollout status deployment/$DEPLOYMENT_NAME-$NEW_LIVE_COLOR -n $K8S_NAMESPACE

      - name: Rollback on Failure
        if: failure() && github.event.inputs.deployment_action == 'deploy'
        run: |
          echo "Rolling back Helm release..."
          if helm history $RELEASE_NAME -n $K8S_NAMESPACE --max 1 | grep -q $RELEASE_NAME; then
            previous_revision=$(helm history $RELEASE_NAME -n $K8S_NAMESPACE --max 2 | awk 'NR==3 {print $1}')
            if [[ -n "$previous_revision" ]]; then
              helm rollback $RELEASE_NAME -n $K8S_NAMESPACE "$previous_revision"
              exit 1
            else
              echo "No previous revision found, rollback skipped."
              exit 0
            fi
          else
            echo "Release not found, rollback skipped."
            exit 0
          fi

  update_chart_version:
    needs: deploy_blue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install bump2version
        run: |
          echo "Installing bump2version..."
          pip install bump2version

      - name: Update Chart.yaml with app version
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          echo "Updating Chart.yaml with app version..."
          sed -i "s/^appVersion:.*/appVersion: $IMAGE_TAG/" ./helm/Chart.yaml

      - name: Set Git Author
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Bump Helm Chart Version
        env:
          VERSION_BUMP_TYPE: ${{ github.event.inputs.bump_type }}
        run: |
          echo "Bumping Helm chart version as $VERSION_BUMP_TYPE..."
          bump2version $VERSION_BUMP_TYPE --allow-dirty

      - name: Push Changes to GitHub
        run: |
          echo "Pushing updated Chart.yaml to GitHub..."
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin HEAD:master
