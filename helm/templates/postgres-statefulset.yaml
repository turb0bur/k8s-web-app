apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.db.statefulset.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.db.service.name }}-headless
  replicas: {{ .Values.db.statefulset.replicas }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        resources:
          requests:
            memory: {{ .Values.db.statefulset.resources.requests.memory }}
            cpu: {{ .Values.db.statefulset.resources.requests.cpu }}
          limits:
            memory: {{ .Values.db.statefulset.resources.limits.memory }}
            cpu: {{ .Values.db.statefulset.resources.limits.cpu }}
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: {{ .Values.db.statefulset.port }}
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data/pgdata
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
        readinessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
        - name: init-sql
          configMap:
            name: postgres-init-sql
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.db.statefulset.storage }}
